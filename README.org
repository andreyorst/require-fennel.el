* =require-fennel=

A bridge to bring Fennel as a scripting language to Emacs.

The =require-fennel= macro, provided by this package is capable of loading Fennel code as Emacs Lisp definitions.

For example, we can load the main Fennel module:

#+begin_src emacs-lisp
(require-fennel fennel)

(fennel.eval "(fcollect [i 1 10] (* i i))")
;; => [1 4 9 16 25 36 49 64 81 100]
#+end_src

Or any Fennel file (or Lua, for that matter):

#+begin_src fennel :tangle path/to/greet.fnl :mkdirp yes
;; path/to/greet.fnl
(fn greet [name]
  (.. "Hello, " name " from Fennel!"))

{: greet}
#+end_src

Then we can load it:

#+begin_src emacs-lisp
(require-fennel path.to.greet :as greet)

(greet.greet "Andrey")
;; => "Hello, Andrey from Fennel!"
#+end_src

** Data conversion
Functions defined with =require-fennel= understand how to convert to and back from Emacs Lisp data structures.
Data conversion is recursive, so any nested value should be fine, as long as it follows the specified conversion rules:

*** From Elisp
Most of Emacs Lisp values are representable in Fennel.
Currently supported Emacs Lisp types are:

- Vector:

  =[1 2 3]= is represented as =[1 2 3]=.
- List:

  ='(1 2 3)= is represented as =[1 2 3]=.
- Association list (alist):

  =((:foo . 1) (:bar . 2))= is represented as ={:foo 1 :bar 2}=.
- Hash table:

  =#s(hash-table test equal data ("foo" 1 "bar" 2))= is represented as ={:foo 1 :bar 2}=.
  Order of keys is not guaranteed.

- Keyword:

  =:foo= is represented as ="foo"=.
- Symbol:

  ='false= is represented as =false=
- String:

  ="foo"= is represented as ="foo"=

*** From Fennel
Fennel values are a bit different from Emacs Lisp, so some conversion has to take place.

- Sequential table:

  =[1 2 3]= is represented as =[1 2 3]=.
- Hash table:

  ={:foo 1 :bar 2}= is represented as =((:foo . 1) (:bar . 2))=.
  Order of keys is not guaranteed.
- Multiple values:

  =(values 1 2 3)= is represented as ='(1 2 3)=.
- Functions:

  =(fn [])= is represented as ="#<function: 0x55b66b8e9d60>"=
- Userdata:

  Any userdata is represented as =#<udata: 0x55b66bd6ac28>=
- =true=:

  =true= is represented as =t=.
- =nil=, =false=:

  Both are represented as =nil=.

** Hash tables

*Note*, both multiple values, and hash tables are represented as lists in Emacs Lisp.
However, a hash table is always a list of cons cells - a pure cons cell will never be returned as a single value.

In cases when multiple values are returned, hash tables are encoded as usual:

#+begin_src emacs-lisp
(require-fennel fennel)
(fennel.eval "{:a 1 :b 2}")
;; => (("a" . 1) ("b" . 2))
(fennel.eval "(values 1 {:a 2 :b 3} 4)")
;; => (1 (("b" . 3) ("a" . 2)) 4)
#+end_src

Thus it should be possible to check if the returned value should be treated as a hash table or used with =cl-multiple-value-bind=.
Unfortunately, Emacs Lisp doesn't have an =alistp= predicate.

Alternatively, you can specify, how to convert hash tables to Emacs Lisp.
If you prefer native hash tables, use the =:use-hash-tables t= keyword argument in the =require-fennel= form:

#+begin_src fennel
(require-fennel fennel :as fennel-hash :use-hash-tables t)
(fennel-hash.eval "{:a 1 :b 2}")
;; => #s(hash-table test equal data ("a" 1 "b" 2))
(fennel-hash.eval "(values 1 {:a 2 :b 3} 4)")
;; => (1 #s(hash-table test equal data ("a" 2 "b" 3)) 4)
#+end_src

This works only on definitions created by this specific call of =require-fennel=.
